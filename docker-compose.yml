services:
  traefik:
    image: traefik:v2.11.0
    container_name: transcribo-secure-traefik
    command:
      - "--api.dashboard=true"
      - "--api.insecure=false"
      - "--ping=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=transcribo-secure-network"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.file.directory=/etc/traefik/selfsigned"
      - "--providers.file.watch=true"
      - "--log.level=DEBUG"
      - "--entrypoints.websecure.http.tls=true"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./infrastructure/docker/traefik/selfsigned:/etc/traefik/selfsigned:ro"
    networks:
      - transcribo-secure-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/rawdata", "--no-check-certificate"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  postgres:
    image: postgres:15
    container_name: transcribo-secure-postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - transcribo-secure-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  minio:
    image: minio/minio
    container_name: transcribo-secure-minio
    command: server --console-address ":9001" /data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - "./infrastructure/docker/.minio/data:/data"
      - "./.env:/app/.env:ro"
    networks:
      - transcribo-secure-network
    ports:
      - "9000:9000"
      - "9001:9001"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.minio-api.rule=Host(`minio-api.localhost`)"
      - "traefik.http.routers.minio-api.entrypoints=websecure"
      - "traefik.http.routers.minio-api.tls=true"
      - "traefik.http.routers.minio-api.service=minio-api"
      - "traefik.http.services.minio-api.loadbalancer.server.port=9000"
      - "traefik.http.routers.minio-console.rule=Host(`minio-console.localhost`)"
      - "traefik.http.routers.minio-console.entrypoints=websecure"
      - "traefik.http.routers.minio-console.tls=true"
      - "traefik.http.routers.minio-console.service=minio-console"
      - "traefik.http.services.minio-console.loadbalancer.server.port=9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  backend:
    build:
      context: "./backend"
      dockerfile: Dockerfile
      args:
        BUILDKIT_PROGRESS: quiet
    container_name: transcribo-secure-backend
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        compress: "true"
        mode: "non-blocking"
    environment:
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - MINIO_HOST=${MINIO_HOST}
      - MINIO_PORT=${MINIO_PORT}
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - AZURE_KEYVAULT_URL=${AZURE_KEYVAULT_URL}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      - HF_AUTH_TOKEN=${HF_AUTH_TOKEN}
      - MAX_UPLOAD_SIZE=${MAX_UPLOAD_SIZE}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - TRANSCRIBER_URL=https://transcriber.localhost
    command: ["python", "-m", "src.main"]
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - transcribo-secure-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.localhost`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.services.backend.loadbalancer.server.port=8080"
    volumes:
      - "./.env:/app/.env:ro"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: "no"

  frontend:
    build:
      context: "./frontend"
      dockerfile: Dockerfile
      args:
        BUILDKIT_PROGRESS: quiet
    container_name: transcribo-secure-frontend
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        compress: "true"
        mode: "non-blocking"
    environment:
      - BACKEND_API_URL=http://backend:8080/api/v1
      - REFRESH_INTERVAL=${REFRESH_INTERVAL}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      - FRONTEND_URL=https://app.localhost
      - STORAGE_SECRET=${STORAGE_SECRET}
    volumes:
      - "./.env:/app/.env:ro"
    networks:
      - transcribo-secure-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`app.localhost`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.services.frontend.loadbalancer.server.port=8501"
    restart: unless-stopped

  transcriber:
    build:
      context: "./transcriber"
      dockerfile: Dockerfile
      args:
        BUILDKIT_PROGRESS: quiet
        HF_AUTH_TOKEN: ${HF_AUTH_TOKEN}
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        compress: "true"
        mode: "non-blocking"
    environment:
      - BACKEND_API_URL=http://backend:8080/api/v1
      - DEVICE=${DEVICE}
      - BATCH_SIZE=${BATCH_SIZE}
      - WORKER_COUNT=${WORKER_COUNT:-1}
      - HF_AUTH_TOKEN=${HF_AUTH_TOKEN}
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - SUPPORTED_LANGUAGES=${SUPPORTED_LANGUAGES:-de,en,fr,it}
      - DEFAULT_LANGUAGE=${DEFAULT_LANGUAGE:-de}
    volumes:
      - "transcriber_data:/tmp/transcriber"
      - "huggingface_cache:/root/.cache/huggingface"
      - "pip_cache:/root/.cache/pip"
      - "torch_cache:/root/.cache/torch"
      - "./.env:/app/.env:ro"
    networks:
      - transcribo-secure-network
    deploy:
      mode: replicated
      replicas: ${TRANSCRIBER_REPLICAS:-1}
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '4'
          memory: 16G
        reservations:
          cpus: '2'
          memory: 8G
          devices:
            - driver: nvidia
              count: 1  # Assign 1 GPU per instance
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.transcriber.rule=Host(`transcriber.localhost`)"
      - "traefik.http.services.transcriber.loadbalancer.server.port=8000"
      - "traefik.http.routers.transcriber.entrypoints=websecure"
      - "traefik.http.routers.transcriber.tls=true"
      - "traefik.http.services.transcriber.loadbalancer.sticky=true"
      - "traefik.http.services.transcriber.loadbalancer.sticky.cookie.name=transcriber"
      - "traefik.http.services.transcriber.loadbalancer.sticky.cookie.secure=true"
      - "traefik.http.services.transcriber.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.transcriber.loadbalancer.healthcheck.interval=30s"
      - "traefik.http.services.transcriber.loadbalancer.healthcheck.timeout=5s"

  prometheus:
    image: prom/prometheus:v2.49.1
    container_name: transcribo-secure-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./infrastructure/docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - transcribo-secure-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.localhost`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls=true"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.3.1
    container_name: transcribo-secure-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_PROXY_ENABLED=true
      - GF_SERVER_ROOT_URL=https://metrics.localhost
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_SERVER_DOMAIN=metrics.localhost
      - GF_SERVER_ENFORCE_DOMAIN=true
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=none
      # Alerting disabled
      - GF_UNIFIED_ALERTING_ENABLED=false
      - GF_ALERTING_ENABLED=false
      - GF_LEGACY_ALERTING_ENABLED=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/docker/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/docker/grafana/dashboards:/etc/grafana/dashboards
      - "./.env:/app/.env:ro"
    networks:
      - transcribo-secure-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`metrics.localhost`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    restart: unless-stopped

networks:
  transcribo-secure-network:
    name: transcribo-secure-network

volumes:
  transcriber_data:
  postgres_data:
  huggingface_cache:
  pip_cache:
  torch_cache:
  grafana_data:
  prometheus_data:
